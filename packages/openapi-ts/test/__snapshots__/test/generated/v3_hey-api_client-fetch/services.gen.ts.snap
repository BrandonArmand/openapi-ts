// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { PostServiceWithEmptyTagData, PostServiceWithEmptyTagError, PostServiceWithEmptyTagResponse3, ApiVversionOdataControllerCountError, ApiVversionOdataControllerCountResponse, DeleteFooData3, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostApiRequestBodyData, PostApiFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, CallWithNoContentResponseError, CallWithNoContentResponseResponse, CallWithResponseAndNoContentResponseError, CallWithResponseAndNoContentResponseResponse, DummyAError, DummyAResponse, DummyBError, DummyBResponse, CallWithResponseError, CallWithResponseResponse, CallWithDuplicateResponsesError, CallWithDuplicateResponsesResponse, CallWithResponsesError, CallWithResponsesResponse, CollectionFormatData, TypesData, TypesError, TypesResponse, UploadFileData, UploadFileError, UploadFileResponse, FileResponseData, FileResponseError, FileResponseResponse, ComplexTypesData, ComplexTypesError, ComplexTypesResponse, MultipartRequestData, MultipartResponseError, MultipartResponseResponse, ComplexParamsData, ComplexParamsError, ComplexParamsResponse, CallWithResultFromHeaderError, CallWithResultFromHeaderResponse, TestErrorCodeData, TestErrorCodeError, TestErrorCodeResponse, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Error, NonAsciiæøåÆøÅöôêÊ字符串Response } from './types.gen';

export const serviceWithEmptyTag = (options?: Options) => { return (options?.client ?? client).get<void>({
    ...options,
    url: '/api/v{api-version}/no-tag'
}); };

export const postServiceWithEmptyTag = (options: Options<PostServiceWithEmptyTagData>) => { return (options?.client ?? client).post<PostServiceWithEmptyTagResponse3, PostServiceWithEmptyTagError>({
    ...options,
    url: '/api/v{api-version}/no-tag'
}); };

export const apiVVersionOdataControllerCount = (options?: Options) => { return (options?.client ?? client).get<ApiVversionOdataControllerCountResponse, ApiVversionOdataControllerCountError>({
    ...options,
    url: '/api/v{api-version}/simple/$count'
}); };

export const getCallWithoutParametersAndResponse = (options?: Options) => { return (options?.client ?? client).get<void>({
    ...options,
    url: '/api/v{api-version}/simple'
}); };

export const putCallWithoutParametersAndResponse = (options?: Options) => { return (options?.client ?? client).put<void>({
    ...options,
    url: '/api/v{api-version}/simple'
}); };

export const postCallWithoutParametersAndResponse = (options?: Options) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/simple'
}); };

export const deleteCallWithoutParametersAndResponse = (options?: Options) => { return (options?.client ?? client).delete<void>({
    ...options,
    url: '/api/v{api-version}/simple'
}); };

export const optionsCallWithoutParametersAndResponse = (options?: Options) => { return (options?.client ?? client).options<void>({
    ...options,
    url: '/api/v{api-version}/simple'
}); };

export const headCallWithoutParametersAndResponse = (options?: Options) => { return (options?.client ?? client).head<void>({
    ...options,
    url: '/api/v{api-version}/simple'
}); };

export const patchCallWithoutParametersAndResponse = (options?: Options) => { return (options?.client ?? client).patch<void>({
    ...options,
    url: '/api/v{api-version}/simple'
}); };

export const deleteFoo = (options: Options<DeleteFooData3>) => { return (options?.client ?? client).delete<void>({
    ...options,
    url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}'
}); };

export const callWithDescriptions = (options?: Options<CallWithDescriptionsData>) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/descriptions/'
}); };

/**
 * @deprecated
 */
export const deprecatedCall = (options: Options<DeprecatedCallData>) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/parameters/deprecated'
}); };

export const callWithParameters = (options: Options<CallWithParametersData>) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/parameters/{parameterPath}'
}); };

export const callWithWeirdParameterNames = (options: Options<CallWithWeirdParameterNamesData>) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}'
}); };

export const getCallWithOptionalParam = (options: Options<GetCallWithOptionalParamData>) => { return (options?.client ?? client).get<void>({
    ...options,
    url: '/api/v{api-version}/parameters/'
}); };

export const postCallWithOptionalParam = (options: Options<PostCallWithOptionalParamData>) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/parameters/'
}); };

export const postApiRequestBody = (options?: Options<PostApiRequestBodyData>) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/requestBody/'
}); };

export const postApiFormData = (options?: Options<PostApiFormDataData>) => { return (options?.client ?? client).post<void>({
    ...options,
    ...formDataBodySerializer,
    url: '/api/v{api-version}/formData/'
}); };

export const callWithDefaultParameters = (options?: Options<CallWithDefaultParametersData>) => { return (options?.client ?? client).get<void>({
    ...options,
    url: '/api/v{api-version}/defaults'
}); };

export const callWithDefaultOptionalParameters = (options?: Options<CallWithDefaultOptionalParametersData>) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/defaults'
}); };

export const callToTestOrderOfParams = (options: Options<CallToTestOrderOfParamsData>) => { return (options?.client ?? client).put<void>({
    ...options,
    url: '/api/v{api-version}/defaults'
}); };

export const duplicateName = (options?: Options) => { return (options?.client ?? client).get<void>({
    ...options,
    url: '/api/v{api-version}/duplicate'
}); };

export const duplicateName1 = (options?: Options) => { return (options?.client ?? client).post<void>({
    ...options,
    url: '/api/v{api-version}/duplicate'
}); };

export const duplicateName2 = (options?: Options) => { return (options?.client ?? client).put<void>({
    ...options,
    url: '/api/v{api-version}/duplicate'
}); };

export const duplicateName3 = (options?: Options) => { return (options?.client ?? client).delete<void>({
    ...options,
    url: '/api/v{api-version}/duplicate'
}); };

export const callWithNoContentResponse = (options?: Options) => { return (options?.client ?? client).get<CallWithNoContentResponseResponse, CallWithNoContentResponseError>({
    ...options,
    url: '/api/v{api-version}/no-content'
}); };

export const callWithResponseAndNoContentResponse = (options?: Options) => { return (options?.client ?? client).get<CallWithResponseAndNoContentResponseResponse, CallWithResponseAndNoContentResponseError>({
    ...options,
    url: '/api/v{api-version}/multiple-tags/response-and-no-content'
}); };

export const dummyA = (options?: Options) => { return (options?.client ?? client).get<DummyAResponse, DummyAError>({
    ...options,
    url: '/api/v{api-version}/multiple-tags/a'
}); };

export const dummyB = (options?: Options) => { return (options?.client ?? client).get<DummyBResponse, DummyBError>({
    ...options,
    url: '/api/v{api-version}/multiple-tags/b'
}); };

export const callWithResponse = (options?: Options) => { return (options?.client ?? client).get<CallWithResponseResponse, CallWithResponseError>({
    ...options,
    url: '/api/v{api-version}/response'
}); };

export const callWithDuplicateResponses = (options?: Options) => { return (options?.client ?? client).post<CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError>({
    ...options,
    url: '/api/v{api-version}/response'
}); };

export const callWithResponses = (options?: Options) => { return (options?.client ?? client).put<CallWithResponsesResponse, CallWithResponsesError>({
    ...options,
    url: '/api/v{api-version}/response'
}); };

export const collectionFormat = (options: Options<CollectionFormatData>) => { return (options?.client ?? client).get<void>({
    ...options,
    url: '/api/v{api-version}/collectionFormat'
}); };

export const types = (options: Options<TypesData>) => { return (options?.client ?? client).get<TypesResponse, TypesError>({
    ...options,
    url: '/api/v{api-version}/types'
}); };

export const uploadFile = (options: Options<UploadFileData>) => { return (options?.client ?? client).post<UploadFileResponse, UploadFileError>({
    ...options,
    url: '/api/v{api-version}/upload'
}); };

export const fileResponse = (options: Options<FileResponseData>) => { return (options?.client ?? client).get<FileResponseResponse, FileResponseError>({
    ...options,
    url: '/api/v{api-version}/file/{id}'
}); };

export const complexTypes = (options: Options<ComplexTypesData>) => { return (options?.client ?? client).get<ComplexTypesResponse, ComplexTypesError>({
    ...options,
    url: '/api/v{api-version}/complex'
}); };

export const multipartRequest = (options?: Options<MultipartRequestData>) => { return (options?.client ?? client).post<void>({
    ...options,
    ...formDataBodySerializer,
    url: '/api/v{api-version}/multipart'
}); };

export const multipartResponse = (options?: Options) => { return (options?.client ?? client).get<MultipartResponseResponse, MultipartResponseError>({
    ...options,
    url: '/api/v{api-version}/multipart'
}); };

export const complexParams = (options: Options<ComplexParamsData>) => { return (options?.client ?? client).put<ComplexParamsResponse, ComplexParamsError>({
    ...options,
    url: '/api/v{api-version}/complex/{id}'
}); };

export const callWithResultFromHeader = (options?: Options) => { return (options?.client ?? client).post<CallWithResultFromHeaderResponse, CallWithResultFromHeaderError>({
    ...options,
    url: '/api/v{api-version}/header'
}); };

export const testErrorCode = (options: Options<TestErrorCodeData>) => { return (options?.client ?? client).post<TestErrorCodeResponse, TestErrorCodeError>({
    ...options,
    url: '/api/v{api-version}/error'
}); };

export const nonAsciiæøåÆøÅöôêÊ字符串 = (options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data>) => { return (options?.client ?? client).post<NonAsciiæøåÆøÅöôêÊ字符串Response, NonAsciiæøåÆøÅöôêÊ字符串Error>({
    ...options,
    url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串'
}); };